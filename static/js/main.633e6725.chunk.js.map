{"version":3,"sources":["pages/MainPage.js","config/axiosConfig.js","components/RegisterBoard.js","components/BoardList.js","components/RegisterAchievement.js","components/RegisterPlayer.js","components/BoardAchievements.js","components/BoardPlayers.js","pages/AdminPage.js","components/RegisterComponent.js","pages/RegisterPage.js","components/AchievementList.js","components/CompleteAchievementList.js","pages/PlayerPage.js","App.js","reportWebVitals.js","index.js"],"names":["MainPage","to","className","instance","axios","create","baseURL","RegisterBoard","props","idAdmin","refreshBoards","useState","registerName","setRegisterName","registerDate","setRegisterDate","htmlFor","id","type","onChange","event","target","value","placeholder","onClick","nameRequest","dateRequest","post","name","id_admin","date_end","then","r","alert","data","id_board","catch","response","BoardList","typeUser","idUser","handleInput","lastBoard","initBoards","boardList","setBoardList","useEffect","get","res","boardDTOSet","boards","map","e","RegisterAchievement","refreshAchievements","idBoard","registerNameAchievement","setRegisterNameAchievement","registerPointAchievement","setRegisterPointAchievemen","points","board_name","RegisterPlayer","refreshPlayers","idPlayer","setIDPlayer","name_player","BoardAchivements","lastAchivement","BoardAchievements","setBoardAchivements","achievementDTOSet","BoardPlayers","lastPlayer","setBoardPlayers","players","AdminPage","initStateAdmin","board","params","setParams","admin","setAdmin","setLastBoard","lastAchievement","setLastAchievement","setLastPlayer","newValue","RegisterComponent","typeRegister","register","setRegister","setIdUser","nameUser","setNameUser","RegisterPage","AchievementList","initAchievements","achievementList","setAchievementList","CompleteAchievementList","completeAchievementList","setCompleteAchievementList","achievements_complete","PlayerPage","initStatePlayer","achievement","player","setPlayer","lastAchievment","setLastAchievment","disabled","payload","App","document","body","style","backgroundColor","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.633e6725.chunk.js","sourcesContent":["import { Link } from \"react-router-dom\";\r\n\r\nconst MainPage = () => {\r\n  return (\r\n    <>\r\n    <h1>Saude Checker</h1>\r\n    <Link to=\"/admin\">\r\n      <div className=\"divMain\">\r\n        <h1 className=\"tituloMain\">Página do administrador</h1>\r\n        <p className=\"subTituloMain\">Visualize todas as funções dos administradores.</p>\r\n      </div>\r\n    </Link>\r\n    <Link to=\"/player\">\r\n    <div className=\"divMain\">\r\n      <h1 className=\"tituloMain\">Página do Player</h1>\r\n      <p className=\"subTituloMain\">Visualize todas as informações do player.</p>\r\n    </div>\r\n    </Link>\r\n    <Link to=\"/register\">\r\n    <div className=\"divMain\">\r\n      <h1 className=\"tituloMain\">Página de Cadastro</h1>\r\n      <p className=\"subTituloMain\">Cadastre seus usuários e administradores.</p>\r\n    </div>\r\n    </Link>\r\n  </>\r\n  )\r\n}\r\n\r\nexport default MainPage;","import axios from \"axios\";\r\n\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://saudechecker.herokuapp.com'\r\n})\r\n\r\nexport default instance;","import { useState } from \"react\"\r\nimport instance from \"../config/axiosConfig\"\r\n\r\nconst RegisterBoard = (props) => {\r\n\r\n  const {idAdmin, refreshBoards} = props\r\n  const [registerName, setRegisterName] = useState(\"\")\r\n  const [registerDate, setRegisterDate] = useState(\"\")\r\n  // const [nameBoard, setNameBoard] = useState(\"\")\r\n  // const [dateEnd, setDateEnd] = useState(\"\")\r\n\r\n\r\n  const handleClick = (nameRequest, dateRequest) => {\r\n    instance.post(`/admin/createboard`,\r\n    {\r\n      name: nameRequest,\r\n      id_admin: idAdmin,\r\n      date_end: dateRequest,\r\n    })\r\n    .then(r => {\r\n      alert(\r\n        `Board Criado: \\n ID :${r.data.id_board}, \\n Nome: ${r.data.name}, \\n Data Final; ${r.data.date_end}`,\r\n      )\r\n      // setNameBoard(r.data.name)\r\n      // setDateEnd(r.data.date_end)\r\n      refreshBoards(r.data.name)\r\n    })\r\n    .catch(response =>{\r\n      alert('Board não registrado')\r\n    })\r\n  }\r\n\r\n  const handleInputName = (event) => {\r\n    setRegisterName(event.target.value)\r\n  }\r\n\r\n  const handleInputDate = (event) => {\r\n    setRegisterDate(event.target.value)\r\n  }\r\n\r\n  return(\r\n    <div>\r\n      <h1 className = \"titleUser\">Criar board</h1>\r\n      <label htmlFor=\"name-board\">\r\n        Nome do Board:\r\n        <input id=\"name-board\" type=\"text\" onChange = {handleInputName}/>\r\n      </label>\r\n      <p></p>\r\n      <label htmlFor=\"date-board\">\r\n        Data de fim:\r\n        <input id=\"date-board\" type=\"text\" onChange = {handleInputDate} placeholder=\"YYYY-MM-DD\"/>\r\n      </label>\r\n    <button type = \"button\" onClick={() => handleClick(registerName, registerDate)}>Cadastre Board</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RegisterBoard;","import { useEffect, useState } from \"react\"\r\nimport instance from \"../config/axiosConfig\"\r\n\r\nconst BoardList = (props) => {\r\n\r\n  const {typeUser, idUser, handleInput, lastBoard} = props\r\n\r\n  const initBoards = [{\r\n    \"name\": \"\",\r\n    \"id_admin\": \"\",\r\n    \"id_board\": \"\",\r\n    \"date_end\": \"\"\r\n  }]\r\n\r\n  const [boardList, setBoardList] = useState(initBoards)\r\n\r\n  useEffect(() => {\r\n    if ( idUser !== '') {\r\n      if (typeUser === 'player'){\r\n        instance.get(`/player/boards/?id_player=${idUser}`)\r\n        .then(res => setBoardList([...initBoards,...res.data.boardDTOSet]))\r\n      } else if (typeUser === 'admin'){\r\n        instance.get(`/admin/boards/${idUser}`)\r\n        .then(res => setBoardList([...initBoards,...res.data.boards]))\r\n      }\r\n    } else {\r\n      setBoardList(initBoards)\r\n    }\r\n  },[idUser, lastBoard])\r\n\r\n\r\n  return (\r\n    <div>\r\n      <label>Selecione o board:</label>\r\n      <select name=\"board\" onClick = {handleInput}>\r\n        {boardList.map(e => (\r\n          <option key={e.id_board} value = {e.id_board}>{e.name}</option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BoardList;","import { useState } from \"react\"\r\nimport instance from \"../config/axiosConfig\"\r\n\r\nconst RegisterAchievement = (props) => {\r\n\r\n  const {idAdmin, refreshAchievements, idBoard} = props\r\n  const [registerNameAchievement, setRegisterNameAchievement] = useState(\"\")\r\n  const [registerPointAchievement, setRegisterPointAchievemen] = useState(\"\")\r\n\r\n\r\n  const handleClick = () => {\r\n    instance.post(`/admin/createachievement`,\r\n    {\r\n      \"name\": registerNameAchievement,\r\n      \"id_admin\": idAdmin,\r\n      \"id_board\": idBoard,\r\n      \"points\": registerPointAchievement\r\n    })\r\n    .then(r => {\r\n      alert(\r\n        `Achievement Criado: \\n ID :${r.data.id}, \\n Nome: ${r.data.name}, \\n Pontos; ${r.data.points}, \\n Pontos; ${r.data.board_name}`,\r\n      )\r\n      refreshAchievements(r.data.name)\r\n    })\r\n    .catch(response =>{\r\n      alert('Achievement não registrado')\r\n    })\r\n  }\r\n\r\n  const handleInputAchievementName = (event) => {\r\n    setRegisterNameAchievement(event.target.value)\r\n  }\r\n\r\n  const handleInputAchievementPoints = (event) => {\r\n    setRegisterPointAchievemen(event.target.value)\r\n  }\r\n\r\n  return(\r\n    <div>\r\n      <label htmlFor=\"name-achievement\">\r\n        Nome do Achievement:\r\n        <input id=\"name-achievement\" type=\"text\" onChange = {handleInputAchievementName}/>\r\n      </label>\r\n      <label htmlFor=\"date-board\">\r\n        Pontuação do Achievement:\r\n        <input id=\"date-board\" type=\"text\" onChange = {handleInputAchievementPoints} placeholder=\"1000\"/>\r\n      </label>\r\n    <button type = \"button\" onClick={() => handleClick()}>Cadastre Achievement</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RegisterAchievement;","import { useState } from \"react\"\r\nimport instance from \"../config/axiosConfig\"\r\n\r\nconst RegisterPlayer = (props) => {\r\n\r\n  const {refreshPlayers, idBoard} = props\r\n  const [idPlayer, setIDPlayer] = useState(\"\")\r\n\r\n  const handleClick = () => {\r\n    instance.post(`/admin/registerplayer`,\r\n    {\r\n      \"id_player\": idPlayer,\r\n      \"id_board\": idBoard\r\n    })\r\n    .then(r => {\r\n      alert(\r\n        `Player Associado com sucesso: \\n Nome :${r.data.name_player}`,\r\n      )\r\n      refreshPlayers(r.data.name)\r\n    })\r\n    .catch(response =>{\r\n      alert('Player não registrado')\r\n    })\r\n  }\r\n\r\n  const handleInputAchievementName = (event) => {\r\n    setIDPlayer(event.target.value)\r\n  }\r\n\r\n  return(\r\n    <div>\r\n      <label htmlFor=\"name-player\">\r\n        ID do Player:\r\n        <input id=\"name-player\" type=\"text\" onChange = {handleInputAchievementName}/>\r\n      </label>\r\n    <button type = \"button\" onClick={() => handleClick()}>Registrar Player no Board</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RegisterPlayer;","import { useEffect, useState } from \"react\"\r\nimport instance from \"../config/axiosConfig\"\r\n\r\nconst BoardAchivements = (props) => {\r\n\r\n  const {idBoard, lastAchivement} = props\r\n\r\n  const initBoards = []\r\n\r\n  const [BoardAchievements, setBoardAchivements] = useState(initBoards)\r\n\r\n  useEffect(() => {\r\n    instance.get(`/admin/get_achievements/${idBoard}`)\r\n        .then(res => setBoardAchivements(res.data.achievementDTOSet))\r\n  },[idBoard, lastAchivement])\r\n\r\n\r\n  return (\r\n    <ul>\r\n      {BoardAchievements.map(e => (\r\n        <li key={e.id}>{e.name} - {e.points}</li>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default BoardAchivements;","import { useEffect, useState } from \"react\"\r\nimport instance from \"../config/axiosConfig\"\r\n\r\nconst BoardPlayers = (props) => {\r\n\r\n  const {idBoard, lastPlayer} = props\r\n\r\n  const initBoards = []\r\n\r\n  const [BoardAchievements, setBoardPlayers] = useState(initBoards)\r\n\r\n  useEffect(() => {\r\n    instance.get(`/admin/board_players/${idBoard}`)\r\n        .then(res => setBoardPlayers(res.data.players))\r\n  },[idBoard, lastPlayer])\r\n\r\n\r\n  return (\r\n    <ul>\r\n      {BoardAchievements.map(e => (\r\n        <li key={e.id}>{e.name} - {e.points}pts</li>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default BoardPlayers;","import { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport instance from \"../config/axiosConfig\";\r\nimport RegisterBoard from \"../components/RegisterBoard\";\r\nimport BoardList from \"../components/BoardList\";\r\nimport RegisterAchievement from \"../components/RegisterAchievement\";\r\nimport RegisterPlayer from \"../components/RegisterPlayer\";\r\nimport BoardAchivements from \"../components/BoardAchievements\";\r\nimport BoardPlayers from \"../components/BoardPlayers\";\r\n\r\n\r\nconst AdminPage = () => {\r\n  const initStateParams = {\r\n    id: '',\r\n    board: '',\r\n  }\r\n\r\n  const initStateAdmin = {\r\n    id: '',\r\n    name: '',\r\n  }\r\n\r\n  const [params, setParams] = useState(initStateParams)\r\n  const [admin, setAdmin] = useState(initStateAdmin)\r\n  const [lastBoard, setLastBoard] = useState(\"\")\r\n  const [lastAchievement, setLastAchievement] = useState(\"\")\r\n  const [lastPlayer, setLastPlayer] = useState(\"\")\r\n\r\n  const searchIdAdmin = () => {\r\n    instance.get(`/admin/${params.id}`)\r\n    .then((res) => setAdmin(res.data))\r\n    .catch(res => {\r\n      alert('Admin não encontrado')\r\n      setAdmin(initStateAdmin)})\r\n  }\r\n\r\n  const handleInput = ({target}) => {\r\n    const {name, value} = target;\r\n    const newValue = {...params}\r\n    newValue[name] = value\r\n    setParams(newValue)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Link to=\"/\">Voltar à Página Principal</Link>\r\n      </div>\r\n\r\n      <div className = \"divUser\">\r\n        <label htmlFor=\"input-id\">\r\n          Insira aqui o id do Admin:\r\n          <input type=\"text\" id=\"input-id\" name=\"id\" onChange={handleInput}/>\r\n          <button onClick = {searchIdAdmin}>Carregar Admin</button>\r\n        </label>\r\n        <div>\r\n          Carregamos o admin: {admin.id} - {admin.name}\r\n        </div>\r\n      </div>\r\n\r\n      <div className = \"divUser\">\r\n        <RegisterBoard idAdmin={admin.id} refreshBoards = {setLastBoard}/>\r\n      </div>\r\n\r\n      <div className = \"divUser\">\r\n        <h1 className = \"titleUser\">Ações no board</h1>\r\n\r\n        <BoardList typeUser = 'admin' idUser = {admin.id} handleInput = {handleInput} lastBoard={lastBoard}/>\r\n        \r\n        <h3 className = \"subTitleUser\">Cadastro de achievements</h3>\r\n        <RegisterAchievement idAdmin= {admin.id} refreshAchievements={setLastAchievement}  idBoard = {params.board}/>\r\n        \r\n        <h3 className = \"subTitleUser\">Cadastro de players</h3>\r\n        <RegisterPlayer refreshPlayers = {setLastPlayer} idBoard = {params.board}/>\r\n\r\n        <h3 className = \"subTitleUser\">Achievements do board</h3>\r\n        <BoardAchivements idBoard = {params.board} lastAchivement = {lastAchievement}/>\r\n\r\n        <h3 className = \"subTitleUser\">Players do board</h3>\r\n        <BoardPlayers idBoard={params.board} lastPlayer={lastPlayer}/>\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AdminPage;","import axios from \"axios\"\r\nimport { useState } from \"react\"\r\n\r\nconst RegisterComponent = (props) => {\r\n\r\n  const {typeRegister} = props\r\n\r\n  const [register, setRegister] = useState(\"\")\r\n  const [idUser, setIdUser] = useState(\"\")\r\n  const [nameUser, setNameUser] = useState(\"\")\r\n\r\n\r\n  const handleClick = (nameRequest) => {\r\n    axios.post(`https://saudechecker.herokuapp.com/${typeRegister}/create`,\r\n    {\r\n      name: nameRequest\r\n    })\r\n    .then(r => {\r\n      setNameUser(r.data.name)\r\n      setIdUser(r.data.id)\r\n    })\r\n  }\r\n\r\n  const handleInput = (event) => {\r\n    setRegister(event.target.value)\r\n  }\r\n\r\n  return(\r\n    <div className = \"divUser\">\r\n    <h1 className = \"titleUser\">Criar {typeRegister}</h1>\r\n    <input type=\"text\" placeholder=\"Inisira aqui o nome...\" onChange = {handleInput}/>\r\n    <button type = \"button\" onClick={() => handleClick(register)}>Cadastre {typeRegister}</button>\r\n    <h3 className = \"textTopUser\">Foi criado o {typeRegister}:</h3>\r\n    <p className = \"textUser\">Nome: {nameUser}</p>\r\n    <p className = \"textUser\">ID: {idUser}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RegisterComponent;","import { Link } from \"react-router-dom\";\r\nimport RegisterComponent from \"../components/RegisterComponent\";\r\n\r\nconst RegisterPage = () => {\r\n  return (\r\n    <div className=\"body\">\r\n      <Link to=\"/\">Voltar à Página Principal</Link>\r\n\r\n      <RegisterComponent typeRegister=\"player\"/>\r\n      <RegisterComponent typeRegister=\"admin\"/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RegisterPage;","import { useEffect, useState } from \"react\"\r\nimport instance from \"../config/axiosConfig\"\r\n\r\nconst AchievementList = (props) => {\r\n\r\n  const {idPlayer, idBoard, handleInput} = props\r\n\r\n  const initAchievements = [\r\n    {\r\n      \"id\": '',\r\n      \"name\": \"\",\r\n      \"points\": '',\r\n      \"board_name\": \"\"\r\n    }\r\n  ]\r\n\r\n  const [achievementList, setAchievementList] = useState(initAchievements)\r\n\r\n  useEffect(() => {\r\n    if ( idPlayer !== '' && idBoard !== '') {\r\n      instance.get(`/admin/get_achievements/?id_board=${idBoard}&id_user=${idPlayer}`)\r\n      .then(res => setAchievementList([...initAchievements,...res.data.achievementDTOSet]))\r\n    }\r\n    setAchievementList(initAchievements)\r\n  },[idPlayer, idBoard])\r\n\r\n\r\n  return (\r\n    <select name=\"achievement\" onClick = {handleInput}>\r\n      {achievementList.map(e => {\r\n        return <option key={e.id} value = {e.id}>{e.name} - {e.points}pts</option>\r\n      })}\r\n    </select>\r\n  )\r\n}\r\n\r\nexport default AchievementList;","import { useEffect, useState } from \"react\";\r\nimport instance from \"../config/axiosConfig\";\r\n\r\nconst CompleteAchievementList = (props) => {\r\n  const { idPlayer, lastAchievement } = props;\r\n\r\n  const initAchievements = [];\r\n\r\n  const [completeAchievementList, setCompleteAchievementList] = useState(\r\n    initAchievements\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (idPlayer !== \"\") {\r\n      instance\r\n        .get(`/player/my_achievement/${idPlayer}`)\r\n        .then((res) =>\r\n          setCompleteAchievementList(res.data.achievements_complete)\r\n        );\r\n    }\r\n    setCompleteAchievementList(initAchievements);\r\n  }, [idPlayer, lastAchievement]);\r\n\r\n  return (\r\n    <ul>\r\n      {completeAchievementList.map((e) => {\r\n        return (\r\n          <li key={e.name}>\r\n            {e.name} - {e.points}pts\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default CompleteAchievementList;\r\n","import { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport AchievementList from \"../components/AchievementList\";\r\nimport BoardList from \"../components/BoardList\";\r\nimport CompleteAchievementList from \"../components/CompleteAchievementList\";\r\nimport instance from \"../config/axiosConfig\";\r\n\r\nconst PlayerPage = () => {\r\n\r\n  const initStateParams = {\r\n    id: '',\r\n    board: '',\r\n    achievement: '',\r\n  }\r\n\r\n  const initStatePlayer = {\r\n    id: '',\r\n    name: '',\r\n    points: '',\r\n  }\r\n\r\n  const [params, setParams] = useState(initStateParams)\r\n  const [player, setPlayer] = useState(initStatePlayer)\r\n  const [lastAchievment, setLastAchievment] = useState(\"\")\r\n\r\n  const searchId = () => {\r\n    instance.get(`/player/${params.id}`)\r\n    .then((res) => setPlayer(res.data))\r\n    .catch(res => {\r\n      alert('Usuário não encontrado')\r\n      setPlayer(initStatePlayer)})\r\n  }\r\n\r\n  const handleInput = ({target}) => {\r\n    const {name, value} = target;\r\n    const newValue = {...params}\r\n    newValue[name] = value\r\n    setParams(newValue)\r\n  }\r\n\r\n  const redeemAchievement = () => {\r\n    const payload = {\r\n      \"id_user\": player.id,\r\n      \"id_achievement\": params.achievement\r\n    }\r\n    instance.post('/player/redeem_achievement', payload)\r\n    .then((res) => {\r\n      setPlayer({...player, points: player.points - +res.data.points})\r\n      setLastAchievment(res.data.name)\r\n    })\r\n    .catch(res => alert(\"Você não tem pontos suficientes ou o achievement ja foi resgatado\"))\r\n  }\r\n\r\n  const verifyRedeem = () => {\r\n    if (params.board === '' || player.id === '' || params.achievement === '' ) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  const completeTask = () => {\r\n    instance.post(`/player/complete_task/?id_player=${player.id}`)\r\n    .then((res) => setPlayer(res.data))\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Link to=\"/\">Voltar à Página Principal</Link>\r\n      </div>\r\n\r\n      <div className = \"divUser\">\r\n        <label htmlFor=\"input-id\">\r\n          Insira aqui o id do Player:\r\n          <input type=\"text\" id=\"input-id\" name=\"id\" onChange={handleInput}/>\r\n          <button onClick = {searchId}>Carregar Player</button>\r\n        </label>\r\n        <div>\r\n          Carregamos o player: {player.id} - {player.name} - {player.points}\r\n        </div>\r\n        <div>\r\n          <button onClick={completeTask} disabled = {player.id === ''}>Completar Tarefa</button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className = \"divUser\">\r\n        <h1 className = \"titleUser\">Seus boards</h1>\r\n\r\n        <BoardList typeUser = 'player' idUser = {player.id} handleInput = {handleInput}/>\r\n\r\n        <AchievementList idPlayer = {player.id} idBoard = {params.board} handleInput = {handleInput}/>\r\n\r\n        <button onClick={redeemAchievement} disabled = {verifyRedeem()}>Resgatar Achievement</button>\r\n      </div>\r\n      \r\n      <div className = \"divUser\">\r\n        <h1 className = \"titleUser\">Achievements resgatados</h1>\r\n        <CompleteAchievementList idPlayer = {player.id} lastAchievement = {lastAchievment}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PlayerPage;","import \"./App.css\";\r\nimport { Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\r\nimport MainPage from \"./pages/MainPage\";\r\nimport AdminPage from \"./pages/AdminPage\";\r\nimport RegisterPage from \"./pages/RegisterPage\";\r\nimport PlayerPage from \"./pages/PlayerPage\";\r\n\r\nfunction App() {\r\n  document.body.style.backgroundColor=\"springgreen\"\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <MainPage/>\r\n        </Route>\r\n\r\n        <Route path=\"/player\">\r\n          <PlayerPage/>\r\n        </Route>\r\n\r\n        <Route path=\"/admin\">\r\n          <AdminPage/>\r\n        </Route>\r\n\r\n        <Route path=\"/register\">\r\n          <RegisterPage/>\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}